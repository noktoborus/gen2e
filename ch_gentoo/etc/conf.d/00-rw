#!/bin/sh
# vim: ft=sh ff=unix fenc=utf-8
# file: 00-rw

provide_lock="/dev/.00-rw-init-depend-lock"

_is_allow() {
	mode=$(cat /proc/cmdline | sed 's/.*init-rw-root=\([a-zA-Z0-9.]*\).*\|.*/\1/')
	[ x"$mode" = x"on" ] && return 0
	return 1
}

_home_get_mode() {
	# get mode for extract user directory from cmdline's init-rw-home-mode
	# modes in [off, on, invert]
	## off	no use home to get users
	## on	try get for all users (in /home/*), exclude seted in init-rw-home-u
	## invert	try get for all setted users (in init-rw-home-u)
	mode=$(cat /proc/cmdline | sed 's/.*init-rw-home-mode=\([a-z0-9.]*\).*\|.*/\1/')
	[ -z "$mode" ] && mode="off"
	echo $mode
}

_home_check_user() {
	# check user for set in init-rw-home-u
	user=$1
	[ -z "$user" ] && return 1
	cat /proc/cmdline | grep '\( \|^\)init-rw-home-u='"$user"'\( \|$\)' >/dev/null
}

_home_get_addr() {
	# get storage address from init-rw-home cmdline
	cat /proc/cmdline | sed 's/.*init-rw-home=\([^ ]*\).*\|.*/\1/'
}

_home_get_root() {
	# get home root directory from cmdline's init-rw-home-root
	cat /proc/cmdline | sed 's/.*init-rw-home-root=\([^ ]*\).*\|.*/\1/'
}

_home_get_timeout() {
	# get timeout for storage service from cmdline's init-rw-home-timeout
	timeout=$(cat /proc/cmdline | sed 's/.*init-rw-home-timeout=\([0-9]*\).*\|.*/\1/')
	[ -z "$timeout" ] && timeout=1
	echo "$timeout"
}

_home_get_driver() {
	cat /proc/cmdline | sed 's/.*init-rw-home-driver=\([a-z0-9]*\).*\|.*/\1/'
}

_home_get_hwid() {
	driver=${1}
	opts=$(echo "$*" | tr ' ' '\n')
	# get hwid for driver
	case "$driver" in
		tftp)
			for eif in $(ip link show | grep -e '.*<.*LOWER_UP.*>.*' | sed 's/[0-9]*: \([a-z0-9]*\).*\|\*/\1/');
			do
				[ -z "$eif" ] && continue
				# link/ether
				ip addr show dev "$eif" | sed -e 's/.*link\/ether \(\([a-z0-9:]\{2,3\}\)\{6\}\).*\|.*/\1/' -e '/^$/d' -e 's/:/_/g'
				# inet
				ip addr show dev "$eif" | sed -e 's/.*inet \(\([0-9]\{1,3\}[\.]\?\)\{4\}\).*\|.*/\1/' -e '/^$/d' -e 's/:/_/g'
				# inet6
				ip addr show dev "$eif" | sed -e 's/.*inet6 \(\([a-z0-9]\{0,4\}[:]\?\)\{1,8\}\).*\|.*/\1/' -e '/^$/d' -e 's/:/_/g'
			done
			;;
		none)
			echo "z"
			;;
		*)
			;;
	esac
	# hostname
	echo $opts | grep '-hostname' 2>/dev/null
	[ $? -ne 0 ] && hostname -s
}

_home_untar() {
	# untar content from home-storage address
	host=$1
	path=$2
	outpath=$3
	timeout=$4
	driver=$5
	[ -z "$timeout" ] && timeout=1
	[ -z "$driver" ] && driver="none"
	[ -z "$host" -o -z "$path" -o -z "$outpath" ] && return 1
	cd "$outpath"
	[ $? -ne 0 ] && return 1
	case "$driver" in
		tftp)
			( echo "mode binary"; echo "rexmt $timeout"; echo "timeout $timeout"; echo "get $path /dev/stderr" ) | ( tftp "$host" >/dev/null ) 2>&1 | tar -x 2>/dev/null
			;;
		none)
			;;
		*)
			( exit 1 )
			;;
	esac
	return $?
}

switch2tmpfs() {
	target="$1"
	store=${2-"/root"}
	chown_args=${3-""}
	chmod_args=${4-""}
	[ -z "$target" ] && return 1
	ebegin "Setup read/write mode for '$target'"
	target_ro="${store}/kzsys_ro/$target"
	target_rw="${store}/kzsys_rw/$target"
	(
		for dir in "$target_ro" "$target_rw";
		do
			mkdir -p "$dir"
		done
		if [ ! -z "$chown_args" ];
		then
			einfo "cast \`chown $chown_args \"$target_rw\"'"
			chown $chown_args "$target_rw"
		fi
		if [ ! -z "$chmod_args" ];
		then
			einfo "cast \`chmod $chmod_args \"$target_rw\"'"
			chmod $chmod_args "$target_rw"
		fi
		mount --bind -o ro "$target" "$target_ro"
		[ $? -ne 0 ] && exit 1
		mount -t aufs\
			-o "br=${target_rw}=rw:${target_ro}=ro"\
			none "$target"
	)
	eend $?
}

